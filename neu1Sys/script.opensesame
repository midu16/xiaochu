---
API: 2.1
OpenSesame: 3.2.8
Platform: nt
---
set width 1280
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 1024
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "C:/Users/Mihai/Documents/GitHub/xiaochu/neu1Sys"
set disable_garbage_collection no
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set background black

define form_consent Einwilligungserklaerung
	set timeout infinite
	set spacing 10
	set rows "3;5;3;1;2"
	set only_render no
	set margins "100;50;50;50"
	set form_title "<b>Begrüßung</b>"
	__form_text__
	Sehr geehrte Teilnehmerin, sehr geehrter Teilnehmer,
	Willkommen zu unserem Experiment!
	Das Experiment besteht aus drei Teilen. In dem ersten Teil füllen Sie bitte einen kurzen Fragebogen aus. Danach bewerten Sie bitte in dem zweiten Teil die Muster auf dem Bildschirm. In dem letzten Teil füllen Sie bitte einen schriftlichen Fragebogen nach dem Computertest aus.
	Drücken Sie jetzt bitte "JA", um das Experiment zu beginnen; wenn Sie das Experiment abbrechen möchten, drücken Sie bitte "NEIN".
	__end__
	set description "A simple consent form"
	set decline_text NEIN
	set decline_message "You need to accept the consent form to participate!"
	set cols "2;2"
	set checkbox_text "Ich habe diese Information gelesen und verstanden."
	set accept_text JA
	set _theme gray
	widget 0 0 2 1 label text="[form_title]"
	widget 0 1 2 1 label center=no text="[form_text]"
	widget 0 2 2 1 checkbox text="[checkbox_text]" var=checkbox_status
	widget 0 3 1 1 button text="[accept_text]" var=accept_status
	widget 1 3 1 1 button text="[decline_text]"


define form_text_display Instruktion1
	set timeout infinite
	set spacing 10
	set rows "2;6;1;1;1;1"
	set only_render no
	set ok_text Start
	set margins "100;50;50;50"
	set form_title "<b>Teil 1</b>"
	__form_text__
	Die folgenden Wörter beschreiben unterschiedliche Gefühle und Empfindungen. Lesen Sie bitte jedes Wort und wählen Sie dann in die Skala neben jedem Wort die Intensität aus.
	Sie haben die Möglichkeit, zwischen fünf Abstufungen zu wählen. Geben Sie bitte an, wie Sie sich <b>momentan</b> gefühlt haben.
	Drücken Sie bitte jetzt "Start" um fortzufahren.
	__end__
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define form_text_display Instruktion2
	set timeout infinite
	set spacing 10
	set rows "2;5;1;1;1"
	set only_render no
	set ok_text Ok
	set margins "100;50;50;50"
	set form_title "<b>Teil 2<b>"
	__form_text__
	Im kommenden Teil werden die verschiedenen Muster einzeln auf dem Bildschirm präsentiert. Bewerten Sie bitte jedes Muster nach der Skala "Gefallen" und "Interessantheit" mit der Maus.
	Wenn sie Fragen haben oder weitere Informationen benötigen, heben Sie bitte die Hand.
	Drücken Sie jetzt bitte "OK" um fortzufahren.
	__end__
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run Einwilligungserklaerung always
	run Instruktion1 always
	run panasb_script always
	run Instruktion2 always
	run rotationImg_script always
	run goodbye always

define form_text_display goodbye
	set timeout infinite
	set spacing 10
	set rows "2;5;1;1;1"
	set only_render no
	set ok_text Ok
	set margins "100;50;50;50"
	set form_title "<b>Vielen Dank<b>"
	__form_text__
	Ich danke Ihnen für die Teilnahme und Interesse.
	Bitten geben Sie der Versuchsleiterin/dem Versuchsleiter ein kurzes Zeichen, um die letzten schriflichen Aufgabe zu schaffen.
	__end__
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define logger new_logger
	set description "Registriert experimentelle Daten"
	set auto_log yes
	log score_mag_as
	log score_mag_bsk
	log score_mag_bs
	log score_mag_fsk
	log score_mag_fs

define inline_script panasb_script
	set description "Executes Python code"
	___run__
	# Panas B (Andreas Gartus, 2017)
	import Tkinter
	# Hide PsychoPy window
	win.winHandle.set_fullscreen(False)
	win.winHandle.set_visible(False)
	# Show mouse
	my_mouse = mouse()
	my_mouse.show_cursor(show=True)
	def createEmptyLine(row_index):
		emptyLine = Tkinter.Label(master,text="",font=(None,12))
		emptyLine.grid(row=row_index,column=0,sticky="W",padx=5,pady=1)
	# Tkinter
	master = Tkinter.Tk()
	master.title("Stimmungsfragebogen (PANAS B)")
	master.resizable(width=True,height=True)	# Make not resizeable
	master.geometry("+300+100")					# Window position
	t1 = Tkinter.Label(master,text="Wie fülen Sie sich im Moment?",font=(None,14),width=40)
	t1.grid(row=0,column=0,columnspan=6,padx=10,pady=10)
	t2 = Tkinter.Label(master,text="Bitte kreuzen Sie an, was am ehesten für Sie zutrifft.",font=(None,12))
	t2.grid(row=1,column=0,columnspan=6,padx=0,pady=0)
	t3 = Tkinter.Label(master,text="",font=(None,12))
	t3.grid(row=2,column=0,columnspan=6,padx=0,pady=0)
	# Rating block
	rating_list = [("gar nicht","1"),("ein bischen","2"),("einigermaßen","3"),("erheblich","4"),("äußerst","5")]
	for i in range(len(rating_list)):
		l = Tkinter.Label(master,text=rating_list[i][0],font=(None,12))
		l.grid(row=3,column=i+1,padx=1,pady=1)
	# Negative affect
	row_index = 4
	subject_panasB_neg =[]
	adjectives_neg = ["1 bekümmert","2 verärgert","3 schuldig","4 erschrocken","5 feindselig","6 gereizt","7 beschämt","8 nervös","9 durcheinander","10 ängstlich"]
	index=0
	for adjective in adjectives_neg:
		if index%5==0:
			createEmptyLine(row_index);
			row_index=row_index+1;
		subject_panasB_neg.append(Tkinter.StringVar())
		subject_panasB_neg[-1].set(None)
		l = Tkinter.Label(master,text=adjective,font=(None,12))
		l.grid(row=row_index,column=0,sticky="W",padx=5,pady=1)
		for i in range(len(rating_list)):
			r = Tkinter.Radiobutton(master,text="",width=12,borderwidth=1,relief="solid")
			r.config(indicatoron=1,variable=subject_panasB_neg[-1],value=rating_list[i][1])
			r.grid(row=row_index,column=i+1,padx=1,pady=1)
		row_index = row_index + 1
		index=index+1
	# Positive affect
	subject_panasB_pos =[]
	adjectives_pos = ["11 aktiv","12 interessiert","13 freudig erregt","14 stark","15 angeregt","16 stolz","17 begeistert","18 wach","19 entschlossen","20 aufmerksam"]
	for adjective in adjectives_pos:
		if index%5==0:
			createEmptyLine(row_index);
			row_index=row_index+1;
		subject_panasB_pos.append(Tkinter.StringVar())
		subject_panasB_pos[-1].set(None)
		l = Tkinter.Label(master,text=adjective,font=(None,12))
		l.grid(row=row_index,column=0,sticky="W",padx=5,pady=1)
		for i in range(len(rating_list)):
			r = Tkinter.Radiobutton(master,text="",width=12,borderwidth=1,relief="solid")
			r.config(indicatoron=1,variable=subject_panasB_pos[-1],value=rating_list[i][1])
			r.grid(row=row_index,column=i+1,padx=1,pady=1)
		row_index = row_index + 1
		index=index+1
	# Check ratings
	def callback():
		try:
			score_pos = 0
			for i in range(10):
				score_pos = score_pos + int(subject_panasB_pos[i].get())
			exp.set("subject_panasB_pos",score_pos)
			score_neg = 0
			for i in range(10):
				score_neg = score_neg + int(subject_panasB_neg[i].get())
			exp.set("subject_panasB_neg",score_neg)
			master.destroy()
		except:
			pass
	b = Tkinter.Button(master,text="OK",width=10,command=callback)
	b.grid(row=row_index,column=0,columnspan=6,padx=5,pady=5)
	master.protocol("WM_DELETE_WINDOW",callback)	# Prevent closing without input
	master.wait_window()
	# Hide mouse
	my_mouse.show_cursor(show=False)
	# Show PsychoPy window
	win.winHandle.set_visible(True)
	win.winHandle.set_fullscreen(True)
	# Write PANAS B variables to logfile
	#log.write_vars(["subject_panasB_neg","subject_panasB_pos"])
	# Write timestamp
	#log.write(clock.time())
	__end__
	set _prepare ""

define inline_script rotationImg_script
	set description "Executes Python code"
	___run__
	import random
	from PIL import Image
	import time
	score_mag_as = 0
	score_mag_bsk = 0
	score_mag_bs = 0
	score_mag_fsk = 0
	score_mag_fs = 0
	score_mag_vb = 0
	score_interesse_as = 0
	score_interesse_bs = 0
	score_interesse_bsk = 0
	score_interesse_fsk = 0
	score_interesse_fs = 0
	score_interesse_vb = 0
	totalDuration=0
	def rotateImages():
		angles = [0,90,180,270]
		fileNames = pool.files()
		for fileName in fileNames:
			path = getFilePath(fileName)
			angle = random.choice(angles)
			image = Image.open(path)
			newImage = image.rotate(angle)
			newImage.save(path)
			print("%s rotate %s degrees" %(fileName, angle))
	def showExperiment(fileName,canvas):
		global totalDuration
		startTime = time.time()
		print("fileName: " + fileName)
		showPic(fileName,canvas)
		showMagChoiceQuestion(fileName)
		showInteressiertChoiceQuestion(fileName)
		endTime = time.time()
		duration = endTime - startTime
		print("duration: "+str(duration))
		totalDuration = totalDuration + duration
	def showPic(fileName,canvas):
		canvas.image(getFilePath(fileName), center=True, x=20, y=-120, scale=0.7, rotation=None)
		canvas.show()
		clock.sleep(1000)
		canvas.clear()
	def showMagChoiceQuestion(fileName):
		form = buildForm(fileName, "Wie <b><i>gefällt</i></b> Ihnen dieses Muster")
		#rating_scale = RatingScale(
		#nodes=["überhaupt nicht 1","2", "3", "4", "5", "6","7sehr gut"], click_accepts=True,
		#orientation=u'horizontal', var='result')
		rating_scale = RatingScale( 
		low=1, high=7, precision=1, scale= None, labels=('überhaupt nicht','sehr gut'),
		markerColor='DarkRed', respKeys=('1','2','3','4','5','6','7'),
		acceptKeys=('1','2','3','4','5','6','7'), var='result')
		form.set_widget(rating_scale, (0, 2))
		form._exec()
		print("mag:" + str(self.get("result")))
		mag_score(fileName, self.get("result"))
		#sum_mag_score(fileName, self.get("result"))
	def showInteressiertChoiceQuestion(fileName):
		form = buildForm(fileName, "Wie <b><i>interessant</i></b> finden Sie dieses Muster")
		#rating_scale = RatingScale(
		#nodes=["überhaupt nicht\ninteressant 1","2", "3", "4", "5", "6","7sehr interessant"], click_accepts=True,
		#orientation=u'horizontal', var='result')
		rating_scale = RatingScale( 
		low=1, high=7, precision=1, scale= None, labels=('überhaupt nicht\ninteressant','sehr interessant'),
		markerColor='DarkRed', respKeys=('1','2','3','4','5','6','7'),
		acceptKeys=('1','2','3','4','5','6','7'), var='result')
		form.set_widget(rating_scale, (0, 2))
		form._exec()
		print("interessiert:" + str(self.get("result")))
		#sum_interesse_score(fileName, self.get("result"))
		interesse_score(fileName, self.get("result"))
	def buildForm(fileName, name):
		form = Form(
		cols=[1], rows=[4,1,1,1],
		margins=(150,10,50,50), spacing=30
		)
		image = ImageWidget(path=getFilePath(fileName), adjust=True, frame=False)
		form.set_widget(image, (0, 0))
		label = Label(name+"?")
		form.set_widget(label, (0, 1))
		return form
	def mag_score(fileName, score):
	#def sum_mag_score(fileName, score):
		global score_mag_as
		global score_mag_bsk
		global score_mag_bs
		global score_mag_fsk
		global score_mag_fs
		global score_mag_vb
		if fileName.startswith("AS"):
			score_mag_as += score
		elif fileName.startswith("BSK"):
			score_mag_bsk += score
		elif fileName.startswith("BS"):
			score_mag_bs += score
		elif fileName.startswith("FSK"):
			score_mag_fsk += score
		elif fileName.startswith("FS"):
			score_mag_fs += score
		elif fileName.startswith("VB"):
			score_mag_vb += score
	#def sum_interesse_score(fileName, score):
	def interesse_score(fileName, score):
		global score_interesse_as
		global score_interesse_bsk
		global score_interesse_bs
		global score_interesse_fsk
		global score_interesse_fs
		global score_interesse_vb
		if fileName.startswith("AS"):
			score_interesse_as += score
		elif fileName.startswith("BSK"):
			score_interesse_bsk += score
		elif fileName.startswith("BS"):
			score_interesse_bs += score
		elif fileName.startswith("FSK"):
			score_interesse_fsk += score
		elif fileName.startswith("FS"):
			score_interesse_fs += score
		elif fileName.startswith("VB"):
			score_interesse_vb += score
	def buildLog():
	#	self.log("score_mag_as," + str(score_mag_as))
	#	self.log("score_mag_bs," + str(score_mag_bs))
	#	self.log("score_mag_bsk," + str(score_mag_bsk))
	#	self.log("score_mag_fs," + str(score_mag_fs))
	#	self.log("score_mag_fsk," + str(score_mag_fsk))
	#	self.log("score_mag_vb," + str(score_mag_vb))
	#
	#	self.log("score_interesse_as," + str(score_interesse_as))
	#	self.log("score_interesse_bs," + str(score_interesse_bs))
	#	self.log("score_interesse_bsk," + str(score_interesse_bsk))
	#	self.log("score_aktiv_fs," + str(score_aktiv_fs))
	#	self.log("score_aktiv_fsk," + str(score_aktiv_fsk))
	#	self.log("score_aktiv_vb," + str(score_aktiv_vb))
		self.log("subject_panasB_neg,subject_panasB_pos,score_mag_as,score_mag_bs,score_mag_bsk,score_mag_fs,score_mag_fsk,score_mag_vb,score_interesse_as,score_interesse_bs,score_interesse_bsk,score_interesse_fs,score_interesse_fsk,score_interesse_vb,total_duration")
		self.log(str(exp.subject_panasB_neg)+","+str(exp.subject_panasB_pos)+","+str(score_mag_as)+","+str(score_mag_bs)+","+str(score_mag_bsk)+","+str(score_mag_fs)+","+str(score_mag_fsk)+","+str(score_mag_vb)+","+str(score_interesse_as)+","+str(score_interesse_bs)+","+str(score_interesse_bsk)+","+str(score_interesse_fs)+","+str(score_interesse_fsk)+","+str(score_interesse_vb)+","+str(totalDuration))
	def start():
		canvas = Canvas()
		fileNames = pool.files()
		random.shuffle(fileNames)
		rotateImages()
		for fileName in fileNames:
			showExperiment(fileName,canvas)
		buildLog()
	def getFilePath(fileName):
		return exp.pool[fileName]
	start()
	__end__
	set _prepare ""

